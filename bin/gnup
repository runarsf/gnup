#!/usr/bin/env bash
# https://trello.com/b/QwNLllss/gnup
set -euo pipefail
#set -o errexit
#set -o pipefail
#set -o noclobber
#set -o nounset
#set -o xtrace

colours () { # {{{
  RESET=$'\e[0;39m'

  E_BOLD=$'\e[1m'
  E_DIM=$'\e[2m'
  E_UNDERLINE=$'\e[4m'
  E_BLINK=$'\e[5m'
  E_INVERT=$'\e[7m'
  E_HIDDEN=$'\e[8m'

  R_NORMAL=$'\e[0m'
  R_BOLD=$'\e[21m'
  R_DIM=$'\e[22m'
  R_UNDERLINE=$'\e[24m'
  R_BLINK=$'\e[25m'
  R_INVERT=$'\e[27m'
  R_HIDDEN=$'\e[28m'

  C_DEFAULT=$'\e[19m'
  C_BLACK=$'\e[30m'
  C_RED=$'\e[31m'
  C_GREEN=$'\e[32m'
  C_YELLOW=$'\e[33m'
  C_BLUE=$'\e[34m'
  C_MAGENTA=$'\e[35m'
  C_CYAN=$'\e[36m'
  C_LGRAY=$'\e[37m'
  C_DGRAY=$'\e[90m'
  C_LRED=$'\e[91m'
  C_LGREEN=$'\e[92m'
  C_LYELLOW=$'\e[93m'
  C_LBLUE=$'\e[94m'
  C_LMAGENTA=$'\e[95m'
  C_LCYAN=$'\e[96m'
  C_WHITE=$'\e[97m'

  B_DEFAULT=$'\e[49m'
  B_BLACK=$'\e[40m'
  B_RED=$'\e[41m'
  B_GREEN=$'\e[42m'
  B_YELLOW=$'\e[43m'
  B_BLUE=$'\e[44m'
  B_MAGENTA=$'\e[45m'
  B_CYAN=$'\e[46m'
  B_LGRAY=$'\e[47m'
  B_DGRAY=$'\e[100m'
  B_LRED=$'\e[101m'
  B_LGREEN=$'\e[102m'
  B_LYELLOW=$'\e[103m'
  B_LBLUE=$'\e[104m'
  B_LMAGENTA=$'\e[105m'
  B_LCYAN=$'\e[106m'
  B_WHITE=$'\e[106m'
}
colours
# }}}

usage () { # {{{
	cat <<-EOMAN
	${RESET}${C_GREEN}Usage:${RESET} ${0}  <${C_RED}options${RESET}>  [${C_BLUE}commands-file${RESET}]
	
	${C_GREEN}Options:${RESET}
	  -h, --help               Display usage menu.
	  -q, --query     <${C_RED}query${RESET}>  Pre-fill query for selection menu.
	  -e, --edit               Edit commands file.
	  -t, --text               Don't run command after selection, but print the product.
	  -o, --one                Auto-accept when there's only one available option (fzf only). Can be combined with --query.
	  -r, --regex   <${C_RED}pattern${RESET}>  Match each line with a regex pattern and run the first match.
	
	${C_GREEN}Examples:${RESET}
	  ${0} ${C_RED}-r${RESET}
	${RESET}
	EOMAN
} # }}}

# Argument parsing {{{
# TODO Add --create-default (create default commands file), or maybe move it to the Makefile. Maybe it should create file based on context.
# TODO Check for dependencies.
# TODO Add support for post-delection editing of command with tmp vim files. Or maybe zsh?
# TODO Comments on previous line to appear in preview pane.
# TODO Empty substitutions should be reusable (<> should not act as a token, rather substitute *just* that one, and currently the only way of inserting an empty value (unless space works))
# TODO Required substitutions (e.g. <!keyword>)
# TODO "No commands file found, create?" Yes/No with FZF.
# FIXME Stdin pipe redirection {{{
#if test -p /dev/stdin; then
#  STDIN_COMMANDS="$(cat)"
#fi

# Check to see if a pipe exists on stdin.
#if [ -p /dev/stdin ]; then
#  echo "Data was piped to this script!"
#  # If we want to read the input line by line
#  while IFS= read line; do
#    echo "Line: ${line}"
#  done
#  # Or if we want to simply grab all the data, we can simply use cat instead
#  # cat
#else
#  echo "No input was found on stdin, skipping!"
#  # Checking to ensure a filename was specified and that it exists
#  if [ -f "$1" ]; then
#    echo "Filename specified: ${1}"
#    echo "Doing things now.."
#  else
#    echo "No input given!"
#  fi
#fi
# }}}

positional=()
REGEX="" SELECT_ONE="" OUTPUT_AS_TEXT="" FZF_QUERY="" EDIT_COMMANDS_FILE="" # DEFAULT_COMMANDS=""
while test "${#}" -gt "0"; do
  case "${1}" in
    -h|--help)
      usage
      exit 0
      shift;;
    -q|--query)
      FZF_QUERY="${2:?}"
      shift;shift;;
    -e|--edit)
      EDIT_COMMANDS_FILE="true"
      shift;;
    -t|--text)
      OUTPUT_AS_TEXT="true"
      shift;;
    -o|--one)
      SELECT_ONE="--select-1"
      shift;;
    -r|--regex)
      REGEX="${2:?}"
      shift;shift;;
    --*)
      printf "Unknown option: ${1}\n"
      exit 1
      shift;;
    -*)
      shopts="${1}"
      if test "${#shopts}" -le "2"; then
        printf "Unknown option: ${shopts}\n"
        exit 2
      fi
      shift
      set -- "${shopts:0:2}" "-${shopts:2}" "${@}"
      ;;
    *)
      positional+=("${1}")
      shift;;
  esac
done

set -- "${positional[@]}"

#if test "${#}" -gt "0"; then
#  printf "Commands file: ${*}\n"
#  COMMANDS_FILE="${1}"
#fi
COMMANDS_FILE="${1:-}"
# }}}

select_commands_file () { # {{{
  local _commands_file="${1}"

  # TODO Allow git-root commands file.
  # ??? Maybe this function shouldn't check if the file exists so the function could be reused for checking where the commands file *should* be, like for -c|--create.

  if test -z "${COMMANDS_FILE}"; then
    if test -f 'commands'; then
      _commands_file="./commands"
    elif (test -d '.git' || git rev-parse --is-inside-work-tree > /dev/null 2>&1) \
     && test -f "$(find -L -type f -name 'commands' 2> >(grep -v 'Permission denied' >&2))"; then
      _commands_file="$(printf $(find -L -type f -name 'commands' 2> >(grep -v 'Permission denied' >&2)))"
    elif test -f "${XDG_CONFIG_HOME:-${HOME}/.config}/commands"; then
      _commands_file="${XDG_CONFIG_HOME:-${HOME}/.config}/commands"
    elif test -f "${HOME}/.commands"; then
      _commands_file="${HOME}/.commands"
    else
      printf "No commands file found.\n"
      return 1
    fi
  fi
  if ! test -f "$(realpath ${_commands_file})"; then
    printf "Provided commands file not found.\n"
    return 1
  fi

  commands_file="$(realpath ${_commands_file})"
} # }}}

select_command () { # {{{
  local _commands_file="${1}"

  #IFS=$'\r\n'
  #GLOBIGNORE='*'
  local _commands=("$(<${_commands_file})")
  #_commands="${DEFAULT_COMMANDS}$(<${_commands_file})"
  _commands="$(printf "${_commands}" | awk '{$1=$1};1')"

  local _command=""
  if test -n "${REGEX}"; then
    while IFS= read -r _line; do
      if [[ $_line =~ $REGEX ]]; then
        echo $_line matches $REGEX
        _command="${_line}"
        break
      else
        echo $_line does not match $REGEX
      fi
    done <<< "${_commands}"
  else
    _command=$(\
      printf "${_commands}" \
      | fzf --query="${FZF_QUERY}" --exit-0 ${SELECT_ONE}
    )
  fi

  if test -n "${_command}"; then
    command="${_command}"
  else
    return 1
  fi
} # }}}

substitute_keywords () { # {{{
  local _command="${1}"

  while true; do
    # Check if anything left to replace
    [[ ${_command} == *"<"*">"* ]] || break

    # Get the content of the first occurence of <keyword>
    local _keyword="$(echo ${_command} | awk -F[\<\>] '{print $2}')"

    # Get substitution for <keyword>
    local _subst
    read -p "${_keyword}> " _subst
    # Default to keyword if user doesn't provide any substitution/replacement
    test -z "${_subst}" && _subst="${_keyword}"

    # Replace <${_keyword}> with ${_subst}
    # TODO: Implement pre/suffixes in the template strings that show gnup what to do.
    #   e.g. <?something?> should always ask. <??> should always ask and be an empty string.
    #        <:a,b:> should be an array.
    #        <!:a,b:!> should be an array and always ask.
    if test -n "${_keyword// }"; then
      # Replaces all instances of <${_keyword}> with ${_subst}
      _command="$(sed -E "s|(<${_keyword}>)|${_subst}|g" <<< ${_command})"
    else
      # Replaces the first instance of <${_keyword}> with ${_subst}
      _command="$(sed -E "s|(<${_keyword}>)|${_subst}|" <<< ${_command})"
    fi
  done

  command="${_command}"
} # }}}

substitute_arrays () { # {{{
  local _command="${1}"

  while true; do
    # Check if anything left to replace
    [[ ${_command} == *"<:"*","*":>"* ]] || break

    # Get the content of the first occurence of <keyword>
    local _keystring="$(echo ${_command} | awk -F[\<\>] '{print $2}')"
    # Strip first and last character
    local _keys="${_keystring:1: -1}"
    # Turn keys into an array
    IFS=',' read -r -a _keys <<< "${_keys}"

    # Split _keys into a string with \n as the delimeter
    local _keysplit=$( IFS=$'\n'; echo "${_keys[*]}" )
    local _lines=$(( "$(printf "${_keysplit}" | wc -l)" + 1))

    local _subst=$(\
      printf "${_keysplit}" \
    | fzf --query="${FZF_QUERY}" --exit-0
    )

    test -z "${_subst}" && _subst="${_keys[0]}"

    # Replace <:keyword,list:> with ${subst}
    _command="$(sed -E "s|(<${_keystring}>)|${_subst}|g" <<< ${_command})"
  done

  command="${_command}"
} # }}}

utilize () { # {{{
  local _command="${1}"

  printf "$ ${_command}\n\n"

  if test -n "${OUTPUT_AS_TEXT}"; then
    _command="$(envsubst <<<${_command})"
    printf "${_command}"
  else
    # `false; echo 'hi'` would fail if this is not set.
    set +o errexit
    eval "${_command}"
    set -o errexit
  fi
} # }}}

# For future reference: the output of `select_commands_file` is assigned to `commands_file`.
select_commands_file "${COMMANDS_FILE}" # returns `commands_file`
export __file="${commands_file}"
export __path="$(dirname "${__file}")"

if test -n "${EDIT_COMMANDS_FILE}"; then
  eval "${EDITOR:-vim} ${__file}"
  exit 0
fi

select_command "${commands_file}" # returns `command`

substitute_arrays "${command}" # returns `command`
substitute_keywords "${command}" # returns `command`

utilize "${command}"
